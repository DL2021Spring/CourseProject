

from typing import List
from collections import defaultdict


class DisjointSet:
    def __init__(self):
        self.pi = {}

    def union(self, x, y):
        self.pi[self.find(x)] = self.find(y)

    def find(self, x):
        if x not in self.pi:
            self.pi[x] = x
        if self.pi[x] != x:
            self.pi[x] = self.find(self.pi[x])
        return self.pi[x]


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        n = len(graph)
        initial_set = set(initial)
        normal = [i for i in range(n) if i not in initial_set]
        ds = DisjointSet()
        for i in normal:
            for j in normal:
                if graph[i][j] == 1:
                    ds.union(i, j)

        sizes = defaultdict(int)
        for i in normal:
            sizes[ds.find(i)] += 1

        comp2malcount = defaultdict(int)
        mal2comps = defaultdict(set)
        for i in normal:
            for j in initial:
                if graph[i][j] == 1:
                    comp2malcount[ds.find(i)] += 1
                    mal2comps[j].add(ds.find(i))

        idx = min(initial)
        max_size = 0
        for j in initial:
            for comp in mal2comps[j]:
                if comp2malcount[comp] == 1:
                    if sizes[comp] > max_size:
                        max_size = sizes[comp]
                        idx = j
                    elif sizes[comp] == max_size:
                        idx = min(idx, j)

        return idx
