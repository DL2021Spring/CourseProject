
__author__ = 'Daniel'


class Solution(object):
    def lexicalOrder(self, n):
        
        def gen():
            i = 1
            for _ in xrange(n):  
                yield i
                if i * 10 <= n:
                    i *= 10  
                elif i % 10 != 9 and i + 1 <= n:
                    i += 1  
                else:
                    while i % 10 == 9 or i + 1 > n:
                        i /= 10
                    i += 1

        return list(gen())

    def lexicalOrderError(self, n):
        
        ret = []
        for i in xrange(1, 10):
            sig = 1
            while i * sig <= n:
                ret.extend(range(
                    i * sig,
                    min((1+i)*sig-1, n)+1),
                )
                sig *= 10

        return ret


if __name__ == "_"_"m"a"i"n"_"_"":""
"" "" "" "" ""a""s""s""e""r""t"" ""S""o""l""u""t""i""o""n""("")"".""l""e""x""i""c""a""l""O""r""d""e""r""(""3""0"")"" ""=""="" ""[""1"","" ""1""0"","" ""1""1"","" ""1""2"","" ""1""3"","" ""1""4"","" ""1""5"","" ""1""6"","" ""1""7"","" ""1""8"","" ""1""9"","" ""2"","" ""2""0"","" ""2""1"","" ""2""2"","" ""2""3"","" ""2""4"","" ""2""5"","" ""2""6"","" ""2""7"",""
"" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""2""8"","" ""2""9"","" ""3"","" ""3""0"","" ""4"","" ""5"","" ""6"","" ""7"","" ""8"","" ""9""]""
