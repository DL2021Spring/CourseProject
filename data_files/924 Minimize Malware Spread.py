

from typing import List
from collections import defaultdict


class DisjointSet:
    def __init__(self):
        self.pi = {}

    def union(self, x, y):
        pi_x = self.find(x)
        pi_y = self.find(y)
        self.pi[pi_x] = pi_y

    def find(self, x):
        if x not in self.pi:
            self.pi[x] = x
        if self.pi[x] != x:
            self.pi[x] = self.find(self.pi[x])
        return self.pi[x]


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        ds = DisjointSet()
        n = len(graph)  
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    ds.union(i, j)

        counts = defaultdict(int)  
        for i in range(n):
            counts[ds.find(i)] += 1

        malware_counts = defaultdict(int)
        for i in initial:
            malware_counts[ds.find(i)] += 1

        max_i = min(initial)
        for i in initial:
            pi = ds.find(i)
            if malware_counts[pi] == 1:
                max_count = counts[ds.find(max_i)]
                if max_count < counts[pi]:
                    max_i = i
                elif max_count == counts[pi] and max_i > i:
                    max_i = i

        return max_i


if __name__ == "__main__":
    assert Solution().minMalwareSpread([[1,1,0],[1,1,0],[0,0,1]], [0,1]) == 0
